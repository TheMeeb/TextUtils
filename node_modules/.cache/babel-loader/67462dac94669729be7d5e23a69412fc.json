{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { Buffer } from 'buffer';\nconst initialTextState = {\n  text: '',\n  undoStack: [],\n  redoStack: [],\n  status: 'pending'\n};\nconst BASE64 = 'base64';\nconst textSlice = createSlice({\n  name: 'text',\n  initialState: initialTextState,\n  reducers: {\n    undo(state, action) {\n      state.redoStack.push(state.text);\n      state.text = state.undoStack.pop();\n      state.status = 'success';\n    },\n    redo(state, action) {\n      state.undoStack.push(state.text);\n      state.text = state.redoStack.pop();\n      state.status = 'success';\n    },\n    exec(state, action) {\n      state.redoStack = [];\n      state.undoStack.push(action.payload.prevText);\n    },\n    updateText(state, action) {\n      state.text = action.payload.text;\n      state.status = 'pending';\n    },\n    base64(state, action) {\n      state.text = Buffer.from(state.text).toString(BASE64);\n      state.status = 'success';\n    },\n    upperCase(state, action) {\n      state.text = state.text.toUpperCase();\n      state.status = 'success';\n    },\n    lowerCase(state, action) {\n      state.text = state.text.toLowerCase();\n      state.status = 'success';\n    },\n    sentenceCase(state, action) {\n      const words = state.text.toLowerCase().split(' ');\n      const sentenceCased = words.map(word => word.charAt(0).toUpperCase() + word.slice(1));\n      state.text = sentenceCased.join(' ');\n      state.status = 'success';\n    },\n    clear(state, action) {\n      state.text = '';\n      state.status = 'success';\n    },\n    removeWhiteSpace(state, action) {\n      let result = '';\n      for (let i = 0; i < state.text.length - 1; i++) {\n        if (state.text[i] == ' ' && state.text[i + 1] == ' ') continue;else result += state.text[i];\n      }\n      if (state.text[state.text.length - 1] != ' ') result += state.text[state.text.length - 1];\n      state.text = result;\n      state.status = 'success';\n    },\n    removeSpecialCharacters(state, action) {\n      state.text = state.text.replace(/[^a-zA-Z0-9 ]/g, '');\n    },\n    extractText(state, action) {\n      const letters = state.text.match(/[a-z]|[A-Z]/g);\n      if (letters === null) {\n        state.text = '';\n        state.status = 'warning';\n      } else {\n        state.text = letters.join('');\n        state.status = 'success';\n      }\n    },\n    extractNumbers(state, action) {\n      const digits = state.text.match(/[0-9]/g);\n      if (digits === null) {\n        state.text = '';\n        state.status = 'warning';\n      } else {\n        state.text = digits.join('');\n        state.status = 'success';\n      }\n    },\n    extractLink(state, action) {\n      const link = state.text.match(/(?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.)(?:\\([-A-Z0-9+&@#\\/%=~_|$?!:,.]*\\)|[-A-Z0-9+&@#\\/%=~_|$?!:,.])*(?:\\([-A-Z0-9+&@#\\/%=~_|$?!:,.]*\\)|[A-Z0-9+&@#\\/%=~_|$])/gim);\n      if (link === null) {\n        state.text = '';\n        state.status = 'warning';\n      } else {\n        state.text = link.join('');\n        state.status = 'success';\n      }\n    },\n    reverseText(state, action) {\n      const words = state.text.split(' ');\n      let i = 0;\n      let result = '';\n      for (i = 0; i < words.length; i++) result = words[i].split('').reverse().join('') + ' ' + result;\n      state.text = result;\n      state.status = 'success';\n    },\n    replaceText(state, action) {\n      state.text = state.text.split(action.payload.word).join(action.payload.newWord);\n      state.status = 'success';\n    }\n  }\n});\nexport default textSlice.reducer;\nexport const textActions = textSlice.actions;","map":{"version":3,"names":["createSlice","Buffer","initialTextState","text","undoStack","redoStack","status","BASE64","textSlice","name","initialState","reducers","undo","state","action","push","pop","redo","exec","payload","prevText","updateText","base64","from","toString","upperCase","toUpperCase","lowerCase","toLowerCase","sentenceCase","words","split","sentenceCased","map","word","charAt","slice","join","clear","removeWhiteSpace","result","i","length","removeSpecialCharacters","replace","extractText","letters","match","extractNumbers","digits","extractLink","link","reverseText","reverse","replaceText","newWord","reducer","textActions","actions"],"sources":["/home/meeb/muneeb/react_projects/TextUtils/src/store/features/text/textSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { Buffer } from 'buffer';\n\nconst initialTextState = {\n  text: '',\n  undoStack: [],\n  redoStack: [],\n  status: 'pending',\n};\n\nconst BASE64 = 'base64';\n\nconst textSlice = createSlice({\n  name: 'text',\n  initialState: initialTextState,\n  reducers: {\n    undo(state, action) {\n      state.redoStack.push(state.text);\n      state.text = state.undoStack.pop();\n      state.status = 'success';\n    },\n    redo(state, action) {\n      state.undoStack.push(state.text);\n      state.text = state.redoStack.pop();\n      state.status = 'success';\n    },\n    exec(state, action) {\n      state.redoStack = [];\n      state.undoStack.push(action.payload.prevText);\n    },\n    updateText(state, action) {\n      state.text = action.payload.text;\n      state.status = 'pending';\n    },\n    base64(state, action) {\n      state.text = Buffer.from(state.text).toString(BASE64);\n      state.status = 'success';\n    },\n    upperCase(state, action) {\n      state.text = state.text.toUpperCase();\n      state.status = 'success';\n    },\n    lowerCase(state, action) {\n      state.text = state.text.toLowerCase();\n      state.status = 'success';\n    },\n    sentenceCase(state, action) {\n      const words = state.text.toLowerCase().split(' ');\n      const sentenceCased = words.map(\n        (word) => word.charAt(0).toUpperCase() + word.slice(1)\n      );\n      state.text = sentenceCased.join(' ');\n      state.status = 'success';\n    },\n    clear(state, action) {\n      state.text = '';\n      state.status = 'success';\n    },\n    removeWhiteSpace(state, action) {\n      let result = '';\n\n      for (let i = 0; i < state.text.length - 1; i++) {\n        if (state.text[i] == ' ' && state.text[i + 1] == ' ') continue;\n        else result += state.text[i];\n      }\n      if (state.text[state.text.length - 1] != ' ')\n        result += state.text[state.text.length - 1];\n\n      state.text = result;\n      state.status = 'success';\n    },\n    removeSpecialCharacters(state, action) {\n      state.text = state.text.replace(/[^a-zA-Z0-9 ]/g, '');\n    },\n    extractText(state, action) {\n      const letters = state.text.match(/[a-z]|[A-Z]/g);\n      if (letters === null) {\n        state.text = '';\n        state.status = 'warning';\n      } else {\n        state.text = letters.join('');\n        state.status = 'success';\n      }\n    },\n    extractNumbers(state, action) {\n      const digits = state.text.match(/[0-9]/g);\n      if (digits === null) {\n        state.text = '';\n        state.status = 'warning';\n      } else {\n        state.text = digits.join('');\n        state.status = 'success';\n      }\n    },\n    extractLink(state, action) {\n      const link = state.text.match(\n        /(?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.)(?:\\([-A-Z0-9+&@#\\/%=~_|$?!:,.]*\\)|[-A-Z0-9+&@#\\/%=~_|$?!:,.])*(?:\\([-A-Z0-9+&@#\\/%=~_|$?!:,.]*\\)|[A-Z0-9+&@#\\/%=~_|$])/gim\n      );\n      if (link === null) {\n        state.text = '';\n        state.status = 'warning';\n      } else {\n        state.text = link.join('');\n        state.status = 'success';\n      }\n    },\n    reverseText(state, action) {\n      const words = state.text.split(' ');\n      let i = 0;\n      let result = '';\n\n      for (i = 0; i < words.length; i++)\n        result = words[i].split('').reverse().join('') + ' ' + result;\n\n      state.text = result;\n      state.status = 'success';\n    },\n    replaceText(state, action) {\n      state.text = state.text\n        .split(action.payload.word)\n        .join(action.payload.newWord);\n      state.status = 'success';\n    },\n  },\n});\n\nexport default textSlice.reducer;\nexport const textActions = textSlice.actions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}