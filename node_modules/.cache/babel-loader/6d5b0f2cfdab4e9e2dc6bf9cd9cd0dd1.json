{"ast":null,"code":"var _jsxFileName = \"/home/meeb/muneeb/react_projects/TextUtils/src/components/TextForm.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { textActions } from '../store/features/text/textSlice';\nimport Button from './ui/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TextForm(props) {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n\n  /**\r\n   * Get the state of text from the redux store using useSelector\r\n   */\n  const textState = useSelector(state => state.text);\n  const themeState = useSelector(state => state.theme);\n  /**\r\n   * dispatch function to invoke actions on the state\r\n   */\n  const dispatch = useDispatch();\n\n  /**\r\n   * Dispatch to undo text action\r\n   */\n  const handleUndo = () => dispatch(textActions.undo());\n\n  /**\r\n   * Dispatch to redo text action\r\n   */\n  const handleRedo = () => dispatch(textActions.redo());\n\n  /**\r\n   * Converts the text to base64\r\n   */\n  const handlebase64Click = () => {\n    dispatch(textActions.base64());\n  };\n\n  /**\r\n   * Converts the text to uppercase\r\n   */\n  const handleUpClick = () => {\n    dispatch(textActions.upperCase());\n  };\n\n  /**\r\n   * Converts the text to lowercase\r\n   */\n  const handleLowClick = () => {\n    dispatch(textActions.lowerCase());\n  };\n\n  /**\r\n   * Converts the text to sentancecase.\r\n   */\n  const handleSentenceClick = () => {\n    dispatch(textActions.sentenceCase());\n  };\n\n  /**\r\n   * Clears the text\r\n   */\n  const handleClearClick = () => {\n    if (!window.confirm('Do you want to delete the text')) return;\n    dispatch(textActions.clear());\n  };\n\n  /**\r\n   * Invoke speech from text\r\n   * TODO: Can better modify the function\r\n   */\n  const handleSpeakClick = event => {\n    let el = event.currentTarget;\n    if (el.innerHTML === 'Listen Now') el.innerHTML = 'Stop Now';else el.innerHTML = 'Listen Now';\n\n    // el.innerHTML has already been changed here, hence checking for the opposite value\n    if (el.innerHTML === 'Stop Now') {\n      let msg = new SpeechSynthesisUtterance();\n      msg.text = textState.text;\n      window.speechSynthesis.speak(msg);\n    } else {\n      let msg = new SpeechSynthesisUtterance();\n      msg.text = textState.text;\n      window.speechSynthesis.cancel(msg);\n    }\n  };\n\n  /**\r\n   * Copies to clipboard\r\n   */\n  const handleCopyClick = () => {\n    navigator.clipboard.writeText(textState.text);\n  };\n\n  /**\r\n   * Removes white space from the text\r\n   */\n  const handleRemoveWhiteSpaceClick = () => {\n    dispatch(textActions.removeWhiteSpace());\n  };\n\n  /**\r\n   * Removes special characters from the text\r\n   */\n  const handleRemoveSpecialCharacters = () => {\n    dispatch(textActions.removeSpecialCharacters());\n  };\n\n  /**\r\n   * Update the text on every keystroke\r\n   * TODO: Optimize\r\n   */\n  const handleOnChange = event => dispatch(textActions.updateText({\n    text: event.target.value\n  }));\n\n  /**\r\n   * Extracts the words from the text\r\n   */\n  const handletextExtract = () => {\n    dispatch(textActions.extractText());\n  };\n\n  /**\r\n   * Extract the numbers from the text\r\n   */\n  const handleNumExtract = () => {\n    dispatch(textActions.extractNumbers());\n  };\n\n  /**\r\n   * Extract the link from the text\r\n   */\n  const handleLinkExtract = () => {\n    dispatch(textActions.extractLink());\n  };\n\n  /**\r\n   * Reverses the text\r\n   */\n  const handlereverseClick = () => {\n    dispatch(textActions.reverseText());\n  };\n\n  //speech\n\n  let mic;\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (SpeechRecognition) {\n    mic = new SpeechRecognition();\n    mic.continuous = true;\n    mic.interimResults = true;\n    mic.lang = 'en-US';\n  }\n  useEffect(() => {\n    handleListen();\n  }, [isListening]);\n  const handleListen = () => {\n    if (!mic) {\n      return;\n    }\n    if (isListening) {\n      mic.start();\n      console.log('start');\n    } else {\n      mic.stop();\n      console.log('stopeed');\n    }\n    mic.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join('');\n      dispatch(textActions.updateText({\n        text: textState.text + transcript\n      }));\n      mic.onerror = event => {\n        console.log(event.error);\n      };\n    };\n  };\n\n  // handle the paste button click event\n  let pasteSupported = false;\n  if (navigator.clipboard && navigator.clipboard.readText) {\n    pasteSupported = true;\n  }\n  const handlePasteClick = () => {\n    navigator.clipboard.readText().then(text => {\n      dispatch(textActions.updateText({\n        text: textState.text + text\n      }));\n    }).catch(err => {\n      console.log('Something went wrong', err);\n    });\n  };\n\n  /**\r\n   * Replace the word with given prompt\r\n   */\n  const replace = () => {\n    const word = prompt('Enter the string to replace.');\n    const newWord = prompt('Enter the string to replace with.');\n    dispatch(textActions.replaceText({\n      word,\n      newWord\n    }));\n  };\n  const availableActions = [{\n    label: 'Convert to uppercase',\n    handleOnClick: handleUpClick,\n    disabled: textState.text.length === 0\n  }, {\n    label: 'Convert to lowercase',\n    handleOnClick: handleLowClick,\n    disabled: textState.text.length === 0\n  }, {\n    label: 'Convert to sentencecase',\n    handleOnClick: handleSentenceClick,\n    disabled: textState.text.length === 0\n  }, {\n    label: 'Encode to base64',\n    handleOnClick: handlebase64Click,\n    disabled: textState.text.length === 0\n  }, {\n    label: 'Clear Text',\n    handleOnClick: handleClearClick,\n    disabled: textState.text.length === 0\n  }, {\n    label: 'Extract Numbers',\n    handleOnClick: handleNumExtract,\n    disabled: textState.text.length === 0\n  }, {\n    label: 'Extract Links',\n    handleOnClick: handleLinkExtract,\n    disabled: textState.text.length === 0\n  }, {\n    label: 'Extract text',\n    handleOnClick: handletextExtract,\n    disabled: textState.text.length === 0\n  }, {\n    label: 'Listen now',\n    handleOnClick: handleSpeakClick,\n    disabled: textState.text.length === 0\n  }, {\n    label: 'Remove white space',\n    handleOnClick: handleRemoveWhiteSpaceClick,\n    disabled: textState.text.length === 0\n  }, {\n    label: 'Remove Special Characters',\n    handleOnClick: handleRemoveSpecialCharacters,\n    disabled: textState.text.length === 0\n  }, {\n    label: 'Copy to clipboard',\n    handleOnClick: handleCopyClick,\n    disabled: textState.text.length === 0\n  }, {\n    label: 'Paste from clipboard',\n    handleOnClick: handlePasteClick,\n    supported: pasteSupported\n  }, {\n    label: 'Reverse text',\n    handleOnClick: handlereverseClick,\n    disabled: textState.text.length === 0\n  }, {\n    label: isListening ? 'Stop Listening' : 'Start Listening',\n    handleOnClick: () => setIsListening(prevState => !prevState),\n    supported: mic == undefined ? false : true\n  }, {\n    label: 'Change text',\n    handleOnClick: replace,\n    disabled: textState.text.length === 0\n  }, {\n    label: 'Undo Action',\n    handleOnClick: handleUndo,\n    disabled: textState.undoStack.length === 0\n  }, {\n    label: 'Redo Action',\n    handleOnClick: handleRedo,\n    disabled: textState.redoStack.length === 0\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        color: themeState.color\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"mb-2\",\n        children: \"Enter The Text To Analyze Below\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          id: \"myBox\",\n          rows: \"8\",\n          value: textState.text,\n          onChange: handleOnChange,\n          style: {\n            backgroundColor: themeState.backgroundColor,\n            color: themeState.color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), availableActions.map(action => {\n        const supported = action === null || action === void 0 ? void 0 : action.supported;\n        if (supported === false) {\n          return;\n        }\n        return /*#__PURE__*/_jsxDEV(Button, {\n          action: action\n        }, action.label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 18\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-3\",\n      style: {\n        color: themeState.color\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Text Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: textState.text.replace(/\\s/).split(' ').filter(value => value !== '').length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), ' ', \"words,\", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\" \", textState.text.trim().length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), \" characters,\", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [' ', textState.text.replace(/\\n/g, '.').split('.').filter(value => value !== '').length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), ' ', \"statements,\", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\" \", textState.text.split('?').length - 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this), \" questions,\", ' ', /*#__PURE__*/_jsxDEV(\"b\", {\n          children: textState.text.split('!').length - 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), \" exclamations.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [0.08 * textState.text.split(' ').filter(element => {\n          return element.length !== 0;\n        }).length, ' ', \"Minutes read\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: textState.text.length > 0 ? textState.text : 'Nothing to preview!!'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(TextForm, \"3v5NEa4mkqMfG5K8RAnCDJ5fQG8=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n_c = TextForm;\nvar _c;\n$RefreshReg$(_c, \"TextForm\");","map":{"version":3,"names":["useState","useEffect","useSelector","useDispatch","textActions","Button","TextForm","props","isListening","setIsListening","textState","state","text","themeState","theme","dispatch","handleUndo","undo","handleRedo","redo","handlebase64Click","base64","handleUpClick","upperCase","handleLowClick","lowerCase","handleSentenceClick","sentenceCase","handleClearClick","window","confirm","clear","handleSpeakClick","event","el","currentTarget","innerHTML","msg","SpeechSynthesisUtterance","speechSynthesis","speak","cancel","handleCopyClick","navigator","clipboard","writeText","handleRemoveWhiteSpaceClick","removeWhiteSpace","handleRemoveSpecialCharacters","removeSpecialCharacters","handleOnChange","updateText","target","value","handletextExtract","extractText","handleNumExtract","extractNumbers","handleLinkExtract","extractLink","handlereverseClick","reverseText","mic","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","handleListen","start","console","log","stop","onresult","transcript","Array","from","results","map","result","join","onerror","error","pasteSupported","readText","handlePasteClick","then","catch","err","replace","word","prompt","newWord","replaceText","availableActions","label","handleOnClick","disabled","length","supported","prevState","undefined","undoStack","redoStack","color","backgroundColor","action","split","filter","trim","element"],"sources":["/home/meeb/muneeb/react_projects/TextUtils/src/components/TextForm.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { textActions } from '../store/features/text/textSlice';\r\nimport Button from './ui/Button';\r\n\r\nexport default function TextForm(props) {\r\n  const [isListening, setIsListening] = useState(false);\r\n\r\n  /**\r\n   * Get the state of text from the redux store using useSelector\r\n   */\r\n  const textState = useSelector((state) => state.text);\r\n  const themeState = useSelector((state) => state.theme);\r\n  /**\r\n   * dispatch function to invoke actions on the state\r\n   */\r\n  const dispatch = useDispatch();\r\n\r\n  /**\r\n   * Dispatch to undo text action\r\n   */\r\n  const handleUndo = () => dispatch(textActions.undo());\r\n\r\n  /**\r\n   * Dispatch to redo text action\r\n   */\r\n  const handleRedo = () => dispatch(textActions.redo());\r\n\r\n  /**\r\n   * Converts the text to base64\r\n   */\r\n  const handlebase64Click = () => {\r\n    dispatch(textActions.base64());\r\n  };\r\n\r\n  /**\r\n   * Converts the text to uppercase\r\n   */\r\n  const handleUpClick = () => {\r\n    dispatch(textActions.upperCase());\r\n  };\r\n\r\n  /**\r\n   * Converts the text to lowercase\r\n   */\r\n  const handleLowClick = () => {\r\n    dispatch(textActions.lowerCase());\r\n  };\r\n\r\n  /**\r\n   * Converts the text to sentancecase.\r\n   */\r\n  const handleSentenceClick = () => {\r\n    dispatch(textActions.sentenceCase());\r\n  };\r\n\r\n  /**\r\n   * Clears the text\r\n   */\r\n  const handleClearClick = () => {\r\n    if (!window.confirm('Do you want to delete the text')) return;\r\n    dispatch(textActions.clear());\r\n  };\r\n\r\n  /**\r\n   * Invoke speech from text\r\n   * TODO: Can better modify the function\r\n   */\r\n  const handleSpeakClick = (event) => {\r\n    let el = event.currentTarget;\r\n    if (el.innerHTML === 'Listen Now') el.innerHTML = 'Stop Now';\r\n    else el.innerHTML = 'Listen Now';\r\n\r\n    // el.innerHTML has already been changed here, hence checking for the opposite value\r\n    if (el.innerHTML === 'Stop Now') {\r\n      let msg = new SpeechSynthesisUtterance();\r\n      msg.text = textState.text;\r\n      window.speechSynthesis.speak(msg);\r\n    } else {\r\n      let msg = new SpeechSynthesisUtterance();\r\n      msg.text = textState.text;\r\n      window.speechSynthesis.cancel(msg);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Copies to clipboard\r\n   */\r\n  const handleCopyClick = () => {\r\n    navigator.clipboard.writeText(textState.text);\r\n  };\r\n\r\n  /**\r\n   * Removes white space from the text\r\n   */\r\n  const handleRemoveWhiteSpaceClick = () => {\r\n    dispatch(textActions.removeWhiteSpace());\r\n  };\r\n\r\n  /**\r\n   * Removes special characters from the text\r\n   */\r\n  const handleRemoveSpecialCharacters = () => {\r\n    dispatch(textActions.removeSpecialCharacters());\r\n  };\r\n\r\n  /**\r\n   * Update the text on every keystroke\r\n   * TODO: Optimize\r\n   */\r\n  const handleOnChange = (event) =>\r\n    dispatch(textActions.updateText({ text: event.target.value }));\r\n\r\n  /**\r\n   * Extracts the words from the text\r\n   */\r\n  const handletextExtract = () => {\r\n    dispatch(textActions.extractText());\r\n  };\r\n\r\n  /**\r\n   * Extract the numbers from the text\r\n   */\r\n  const handleNumExtract = () => {\r\n    dispatch(textActions.extractNumbers());\r\n  };\r\n\r\n  /**\r\n   * Extract the link from the text\r\n   */\r\n  const handleLinkExtract = () => {\r\n    dispatch(textActions.extractLink());\r\n  };\r\n\r\n  /**\r\n   * Reverses the text\r\n   */\r\n  const handlereverseClick = () => {\r\n    dispatch(textActions.reverseText());\r\n  };\r\n\r\n  //speech\r\n\r\n  let mic;\r\n\r\n  const SpeechRecognition =\r\n    window.SpeechRecognition || window.webkitSpeechRecognition;\r\n  if (SpeechRecognition) {\r\n    mic = new SpeechRecognition();\r\n    mic.continuous = true;\r\n    mic.interimResults = true;\r\n    mic.lang = 'en-US';\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleListen();\r\n  }, [isListening]);\r\n\r\n  const handleListen = () => {\r\n    if (!mic) {\r\n      return;\r\n    }\r\n    if (isListening) {\r\n      mic.start();\r\n      console.log('start');\r\n    } else {\r\n      mic.stop();\r\n      console.log('stopeed');\r\n    }\r\n    mic.onresult = (event) => {\r\n      const transcript = Array.from(event.results)\r\n        .map((result) => result[0])\r\n        .map((result) => result.transcript)\r\n        .join('');\r\n      dispatch(textActions.updateText({ text: textState.text + transcript }));\r\n      mic.onerror = (event) => {\r\n        console.log(event.error);\r\n      };\r\n    };\r\n  };\r\n\r\n  // handle the paste button click event\r\n  let pasteSupported = false;\r\n  if (navigator.clipboard && navigator.clipboard.readText) {\r\n    pasteSupported = true;\r\n  }\r\n\r\n  const handlePasteClick = () => {\r\n    navigator.clipboard\r\n      .readText()\r\n      .then((text) => {\r\n        dispatch(textActions.updateText({ text: textState.text + text }));\r\n      })\r\n      .catch((err) => {\r\n        console.log('Something went wrong', err);\r\n      });\r\n  };\r\n\r\n  /**\r\n   * Replace the word with given prompt\r\n   */\r\n  const replace = () => {\r\n    const word = prompt('Enter the string to replace.');\r\n    const newWord = prompt('Enter the string to replace with.');\r\n    dispatch(textActions.replaceText({ word, newWord }));\r\n  };\r\n\r\n  const availableActions = [\r\n    {\r\n      label: 'Convert to uppercase',\r\n      handleOnClick: handleUpClick,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: 'Convert to lowercase',\r\n      handleOnClick: handleLowClick,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: 'Convert to sentencecase',\r\n      handleOnClick: handleSentenceClick,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: 'Encode to base64',\r\n      handleOnClick: handlebase64Click,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: 'Clear Text',\r\n      handleOnClick: handleClearClick,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: 'Extract Numbers',\r\n      handleOnClick: handleNumExtract,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: 'Extract Links',\r\n      handleOnClick: handleLinkExtract,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: 'Extract text',\r\n      handleOnClick: handletextExtract,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: 'Listen now',\r\n      handleOnClick: handleSpeakClick,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: 'Remove white space',\r\n      handleOnClick: handleRemoveWhiteSpaceClick,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: 'Remove Special Characters',\r\n      handleOnClick: handleRemoveSpecialCharacters,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: 'Copy to clipboard',\r\n      handleOnClick: handleCopyClick,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: 'Paste from clipboard',\r\n      handleOnClick: handlePasteClick,\r\n      supported: pasteSupported,\r\n    },\r\n    {\r\n      label: 'Reverse text',\r\n      handleOnClick: handlereverseClick,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: isListening ? 'Stop Listening' : 'Start Listening',\r\n      handleOnClick: () => setIsListening((prevState) => !prevState),\r\n      supported: mic == undefined ? false : true,\r\n    },\r\n    {\r\n      label: 'Change text',\r\n      handleOnClick: replace,\r\n      disabled: textState.text.length === 0,\r\n    },\r\n    {\r\n      label: 'Undo Action',\r\n      handleOnClick: handleUndo,\r\n      disabled: textState.undoStack.length === 0,\r\n    },\r\n    {\r\n      label: 'Redo Action',\r\n      handleOnClick: handleRedo,\r\n      disabled: textState.redoStack.length === 0,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: themeState.color,\r\n        }}\r\n      >\r\n        <h1 className=\"mb-2\">Enter The Text To Analyze Below</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            value={textState.text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: themeState.backgroundColor,\r\n              color: themeState.color,\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        {availableActions.map((action) => {\r\n          const supported = action?.supported;\r\n\r\n          if (supported === false) {\r\n            return;\r\n          }\r\n\r\n          return <Button key={action.label} action={action} />;\r\n        })}\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{\r\n          color: themeState.color,\r\n        }}\r\n      >\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          <b>\r\n            {\r\n              textState.text\r\n                .replace(/\\s/)\r\n                .split(' ')\r\n                .filter((value) => value !== '').length\r\n            }\r\n          </b>{' '}\r\n          words,\r\n          <b> {textState.text.trim().length}</b> characters,\r\n          <b>\r\n            {' '}\r\n            {\r\n              textState.text\r\n                .replace(/\\n/g, '.')\r\n                .split('.')\r\n                .filter((value) => value !== '').length\r\n            }\r\n          </b>{' '}\r\n          statements,\r\n          <b> {textState.text.split('?').length - 1}</b> questions,{' '}\r\n          <b>{textState.text.split('!').length - 1}</b> exclamations.\r\n        </p>\r\n        <p>\r\n          {0.08 *\r\n            textState.text.split(' ').filter((element) => {\r\n              return element.length !== 0;\r\n            }).length}{' '}\r\n          Minutes read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {textState.text.length > 0 ? textState.text : 'Nothing to preview!!'}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}